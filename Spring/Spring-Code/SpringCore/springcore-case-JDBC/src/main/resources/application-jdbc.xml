<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/util
       http://www.springframework.org/schema/util/spring-util.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">


    <!--获取数据源-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClass}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

        <!--连接池的连接配置 初始化大小， 最小，最大-->
        <property name="initialSize" value="10"/>
        <property name="maxActive" value="20"/>
        <property name="minIdle" value="10"/>
        <property name="queryTimeout" value="5"/>

        <!--配置获取连接等待超时的时间-->
        <property name="maxWait" value="10000"/>
        <!--配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒-->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!--配置一个连接在连接池中最生存时间，单位是毫秒-->
        <property name="minEvictableIdleTimeMillis" value="300000"/>

        <property name="validationQuery" value="SELECT 'x' FROM DUAL"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>

        <!--打开PSCache ,并且指定每个连接上·PSCache的大小，如果Oracle,则把poolPreparedstatements
        配置为true,mysql可以配置为false-->
        <property name="poolPreparedStatements" value="false"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>

    </bean>

    <!--通过驱动获取数据源-->
    <bean id="driverManagerDataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${jdbc.driverClass}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!--使用Spring JDBC JdbcTemplate-->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>


    <!--配置事务管理器
        1.配置数据源
        2.配置基于数据源的事务管理器
        3.配置引用数据源
    -->

    <!--配置事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>


    <!--事务模板类-->
    <bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
        <property name="transactionManager" ref="transactionManager"/>
        <!--设置隔离级别-->
        <property name="isolationLevelName" value="ISOLATION_REPEATABLE_READ"/>
    </bean>

    <!--声明式事务管理
    0.开启注解扫描，自动注入
    0.数据源配置
    1.配置事务管理器
    2.声明式事务配置  -/>  事务增强
    3.使用切点表达式定义目标方法
    -->
    <!--2.声明式事务配置 事务增强-->
    <tx:advice id="txManager" transaction-manager="transactionManager">

        <tx:attributes>
            <!-- 2.1 事务属性定义 -->
            <tx:method name="query*" read-only="true"/>
            <tx:method name="add*" rollback-for="Exception"/>
            <tx:method name="delete*" rollback-for="Exception"/>
            <tx:method name="update*" rollback-for="Exception"/>
            <tx:method name="*" rollback-for="Exception"/>
        </tx:attributes>

    </tx:advice>

    <!--事务控制的方法在业务层中体现-->
    <!-- 3. 使用强大的切点表达式轻松定义目标方法 -->
    <aop:config>

        <!--3.1 通过AOP定义事务的增强切面   .*包 .*任意类 .*任意方法（..任意参数）-->
        <aop:pointcut id="medthosTx" expression="execution(* com.github.soyanga.SpringJDBC.Service.*.*.*(..))"/>
        <!--3.2引用事务增强-->
        <aop:advisor advice-ref="txManager" pointcut-ref="medthosTx"/>

    </aop:config>


    <!--注解配置事务-->
    <!--启用事务注解驱动-->
    <tx:annotation-driven transaction-manager="transactionManager"/>

</beans>