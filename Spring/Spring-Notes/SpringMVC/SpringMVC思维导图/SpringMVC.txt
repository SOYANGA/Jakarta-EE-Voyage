SpringMVC
	 SpringMVC特点
	SpringMVC注解
		 @Controller
		@RequestMapping 
			@RequestMapping处理多个URL
			 @RequestMapping处理HTTP的各种方法
		@RequestMaping的组合注解（方法级别）
		@RequestParam
		@RequestMapping来处理生产和消费者
		@RequestMapping来处理消息头
		@RequestMapping来处理请求参数
		@RequestMapping 处理动态(模板) URI
		@RequestMapping默认的处理方法
	SpringMVC设计理念
		 MVC模式的优势
		Servlet处理与Web请求
		 SpringMVC请求响应
			SpringMVC请求处理流程(高层次)
			特定组件的请求流程
			核心类的请求流程
	Spring的控制器
		控制器上的方法签名
			@RequestParam
			@RequestHeader
			@CookileValue
			@PathVariable
			POJO对象
			Servlet API
		控制器方法支持的参数类型
		控制器方法支持的返回值类型
			ModelAndView
			 Map以及Model
			String类型
				逻辑视图名
				@ResponseBody注解标注之后作为响应内容
			void
	SpringMVC常用特性
		上传文件
			Multipart形式数据请求详解
			Spring中配置Mutipart解析器
				commonsMultipartResolver
				StandardServletMultipartResolver
			编写上传文件的控制器
				创建一个视图
				创建处理器
		异常处理
			异常映射为状态码
			异常处理方法
			异常处理方法进阶
		静态资源处理
			默认Servlet由Web容器进行处理
			 采用Spring的Resources
		拦截器
			 自定义拦截器
	SpringMVC 构建REST服务
		REST简介
			REST优点
			REST架构的主要原则-一切结资源
		Spring如何支持REST
			支持方式
			资源转换
			内容协商
			消息转换器
		REST客户端
			RestTemplate的操作
